import org.ajoberstar.gradle.git.release.semver.*
import org.ajoberstar.gradle.git.release.opinion.Strategies

plugins {
    id 'java'
    id 'de.gliderpilot.semantic-release' version '1.2.0'
    id 'com.jfrog.artifactory' version '4.4.0'
    id 'org.ajoberstar.grgit' version '1.5.1'
    id 'maven'
}

group 'com.praqma'

apply plugin: 'java'
apply plugin: 'ivy-publish'

repositories {
    mavenCentral()
    jcenter()
}

import static org.ajoberstar.gradle.git.release.semver.StrategyUtil.*
import org.ajoberstar.gradle.git.release.semver.*
import org.ajoberstar.grgit.Commit
import de.gliderpilot.gradle.semanticrelease.*

semanticRelease {
    repo{
    }
}

def PartialSemVerStrategy mySuperStategy = { state ->
    def nearest = state.nearestVersion
    def currentPreIdents = state.inferredPreRelease ? state.inferredPreRelease.split('\\.') as List : []
    if (nearest.any == nearest.normal || nearest.any.normalVersion != state.inferredNormal) {
        currentPreIdents << '1'
    } else {
        def nearestPreIdents = nearest.any.preReleaseVersion.split('\\.')
        if (nearestPreIdents.size() <= currentPreIdents.size()) {
            currentPreIdents << '1'
        } else if (currentPreIdents == nearestPreIdents[0..(currentPreIdents.size() - 1)]) {
            def count = parseIntOrZero(nearestPreIdents[currentPreIdents.size()])

            // We want to increment RC only if there are relevant changes since the last rc.
            // If we eg accidently call gradle release we don't want to apply the tag just to nothing
            SemanticReleaseChangeLogService changeLogService = new SemanticReleaseChangeLogService(grgit, repo, TagStrategy())
            List<Commit> log = changeLogService.commits(nearest.any)
            ChangeScope scope = changeLogService.changeScope(log)
            if(!scope){
                currentPreIdents << Integer.toString(count)
            }
            currentPreIdents << Integer.toString(count + 1)

        } else {
            currentPreIdents << '1'
        }
    }
    println "inferredPreRelease form mystr: " + currentPreIdents
    return state.copyWith(inferredPreRelease: currentPreIdents.join('.'))
}

release {
    // add a second strategy to create release candidates from 'rc/.*' branches
    def rel = false
    //println "This is semantic release change log: " + semanticRelease.changeLog
    versionStrategy semanticRelease.releaseStrategy.copyWith(
            // the type is important, without type you would again replace the default strategy
            type: 'rc',
            selector: { SemVerStrategyState state ->
                println "This is a state: " + state.getClass()
                println "Nearest version: " + state.nearestVersion.toString()
                println "Can release: " + semanticRelease.semanticStrategy.canRelease(state)
                rel = semanticRelease.semanticStrategy.canRelease(state)
                println "Is release? : " + rel
                !state.repoDirty && state.currentBranch.name ==~ /integration.*/ &&
                        rel && project.gradle.startParameter.taskNames.find { it == 'release' }
            },
            preReleaseStrategy: StrategyUtil.all({ it.copyWith(inferredPreRelease: 'rc') } as PartialSemVerStrategy,
                    mySuperStategy)
    )
}

println "Current tag: " + grgit.tag.list()[grgit.tag.list().size() - 1].getName()
artifactory {
    contextUrl = 'http://artifactory.swedbank.net:8081/artifactory'
    publish {
        repository {
            repoKey = "p950pce_Gradle_local"
            username = "admin"
            password = "password"
            ivy{
                mavenCompatible = false
            }
        }
        defaults {
            publications('ivyJava')
            // building in artifactory defaults to true but doesn't seem like very useful info?
            publishBuildInfo = false
        }
    }
}

def branchName = "${grgit.branch.current.name}"
def suffix = (branchName == "integration" || branchName == "master")? "": "-dev.${grgit.head().abbreviatedId}"

publishing {
    publications {
        ivyJava(IvyPublication) {
            revision = grgit.tag.list()[grgit.tag.list().size() - 1].getName() + suffix
            organisation = "se.swedbank"
            module = rootProject.name
            from components.java
        }
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
}
