import org.ajoberstar.gradle.git.release.semver.*
import org.ajoberstar.gradle.git.release.opinion.Strategies

plugins {
    id 'java'
    id 'org.ajoberstar.grgit' version '1.5.1'
    id 'de.gliderpilot.semantic-release' version '1.2.0'
    id 'com.jfrog.artifactory' version '4.4.0'
    id 'maven'
}

group 'com.praqma'

apply plugin: 'java'
apply plugin: 'ivy-publish'

repositories {
    mavenCentral()
    jcenter()
}

import static org.ajoberstar.gradle.git.release.semver.StrategyUtil.*
import org.ajoberstar.gradle.git.release.semver.*
import org.ajoberstar.grgit.Commit
import de.gliderpilot.gradle.semanticrelease.*


task myprepare {
    println "QWFOIJFOIQJWOIFJQW"
}

myprepare.doLast {
    println "KLDGJKSLDJGKSDJGKLSDJKLGJSLD"
}

prepare.dependsOn myprepare

prepare.doLast {
    if (!existsCommitWithNotNullChangeScope()) {
        throw new GradleException("bla")
    }
}

def existsCommitWithNotNullChangeScope() {
    def grgit = project.extensions.release.grgit
    def changeScope = project.extensions.semanticRelease.changeLog.changeScope

    List<Commit> commits = grgit.log {
        range 'a435d91797c2151b3df4e97822a65d198e91454a', 'HEAD'
    }

    commits.each { Commit commit ->
        println commit.shortMessage + " -> " + changeScope(commit)
    }

    return commits.any(changeScope)
}

//semanticRelease {
//    changeLog{
//
//    }
//    repo{
//    }
//}

release {
    versionStrategy semanticRelease.releaseStrategy.copyWith(
            // the type is important, without type you would again replace the default strategy
            type: 'rc',
            selector: { SemVerStrategyState state ->
                println "Distanation: " + state.nearestVersion.distanceFromAny
                state.currentBranch.name ==~ /integration.*/ &&
                        semanticRelease.semanticStrategy.canRelease(state) &&
                        state.nearestVersion.distanceFromAny &&
                        !state.isRepoDirty() &&
                        project.gradle.startParameter.taskNames.find { it == 'release' }
            },
            preReleaseStrategy: StrategyUtil.all({ it.copyWith(inferredPreRelease: 'rc') } as PartialSemVerStrategy,
                    Strategies.PreRelease.COUNT_INCREMENTED)
    )
}

artifactory {
    contextUrl = 'http://artifactory.swedbank.net:8081/artifactory'
    publish {
        repository {
            repoKey = "p950pce_Gradle_local"
            username = "admin"
            password = "password"
            ivy{
                mavenCompatible = false
            }
        }
        defaults {
            publications('ivyJava')
            // building in artifactory defaults to true but doesn't seem like very useful info?
            publishBuildInfo = false
        }
    }
}

def branchName = "${grgit.branch.current.name}"
def suffix = (branchName == "integration" || branchName == "master")? "": "-dev.${grgit.head().abbreviatedId}"

publishing {
    publications {
        ivyJava(IvyPublication) {
            organisation = "se.swedbank"
            module = rootProject.name
            from components.java
        }
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
}
